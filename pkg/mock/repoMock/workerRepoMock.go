// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/worker.interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/fazilnbr/project-workey/pkg/domain"
	utils "github.com/fazilnbr/project-workey/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkerRepository is a mock of WorkerRepository interface.
type MockWorkerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerRepositoryMockRecorder
}

// MockWorkerRepositoryMockRecorder is the mock recorder for MockWorkerRepository.
type MockWorkerRepositoryMockRecorder struct {
	mock *MockWorkerRepository
}

// NewMockWorkerRepository creates a new mock instance.
func NewMockWorkerRepository(ctrl *gomock.Controller) *MockWorkerRepository {
	mock := &MockWorkerRepository{ctrl: ctrl}
	mock.recorder = &MockWorkerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerRepository) EXPECT() *MockWorkerRepositoryMockRecorder {
	return m.recorder
}

// AcceptJobRequest mocks base method.
func (m *MockWorkerRepository) AcceptJobRequest(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptJobRequest", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptJobRequest indicates an expected call of AcceptJobRequest.
func (mr *MockWorkerRepositoryMockRecorder) AcceptJobRequest(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptJobRequest", reflect.TypeOf((*MockWorkerRepository)(nil).AcceptJobRequest), id)
}

// AddJob mocks base method.
func (m *MockWorkerRepository) AddJob(job domain.Job) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", job)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJob indicates an expected call of AddJob.
func (mr *MockWorkerRepositoryMockRecorder) AddJob(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockWorkerRepository)(nil).AddJob), job)
}

// DeleteJob mocks base method.
func (m *MockWorkerRepository) DeleteJob(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockWorkerRepositoryMockRecorder) DeleteJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockWorkerRepository)(nil).DeleteJob), id)
}

// FindWorker mocks base method.
func (m *MockWorkerRepository) FindWorker(email string) (domain.WorkerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWorker", email)
	ret0, _ := ret[0].(domain.WorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWorker indicates an expected call of FindWorker.
func (mr *MockWorkerRepositoryMockRecorder) FindWorker(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWorker", reflect.TypeOf((*MockWorkerRepository)(nil).FindWorker), email)
}

// FindWorkerWithId mocks base method.
func (m *MockWorkerRepository) FindWorkerWithId(id int) (domain.WorkerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWorkerWithId", id)
	ret0, _ := ret[0].(domain.WorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWorkerWithId indicates an expected call of FindWorkerWithId.
func (mr *MockWorkerRepositoryMockRecorder) FindWorkerWithId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWorkerWithId", reflect.TypeOf((*MockWorkerRepository)(nil).FindWorkerWithId), id)
}

// InsertWorker mocks base method.
func (m *MockWorkerRepository) InsertWorker(newWorker domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWorker", newWorker)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWorker indicates an expected call of InsertWorker.
func (mr *MockWorkerRepositoryMockRecorder) InsertWorker(newWorker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWorker", reflect.TypeOf((*MockWorkerRepository)(nil).InsertWorker), newWorker)
}

// ListAcceptedJobRequsetFromUser mocks base method.
func (m *MockWorkerRepository) ListAcceptedJobRequsetFromUser(pagenation utils.Filter, id int) ([]domain.RequestResponse, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceptedJobRequsetFromUser", pagenation, id)
	ret0, _ := ret[0].([]domain.RequestResponse)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAcceptedJobRequsetFromUser indicates an expected call of ListAcceptedJobRequsetFromUser.
func (mr *MockWorkerRepositoryMockRecorder) ListAcceptedJobRequsetFromUser(pagenation, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedJobRequsetFromUser", reflect.TypeOf((*MockWorkerRepository)(nil).ListAcceptedJobRequsetFromUser), pagenation, id)
}

// ListJobCategoryUser mocks base method.
func (m *MockWorkerRepository) ListJobCategoryUser(pagenation utils.Filter) ([]domain.Category, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobCategoryUser", pagenation)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListJobCategoryUser indicates an expected call of ListJobCategoryUser.
func (mr *MockWorkerRepositoryMockRecorder) ListJobCategoryUser(pagenation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobCategoryUser", reflect.TypeOf((*MockWorkerRepository)(nil).ListJobCategoryUser), pagenation)
}

// ListPendingJobRequsetFromUser mocks base method.
func (m *MockWorkerRepository) ListPendingJobRequsetFromUser(pagenation utils.Filter, id int) ([]domain.RequestResponse, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingJobRequsetFromUser", pagenation, id)
	ret0, _ := ret[0].([]domain.RequestResponse)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingJobRequsetFromUser indicates an expected call of ListPendingJobRequsetFromUser.
func (mr *MockWorkerRepositoryMockRecorder) ListPendingJobRequsetFromUser(pagenation, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingJobRequsetFromUser", reflect.TypeOf((*MockWorkerRepository)(nil).ListPendingJobRequsetFromUser), pagenation, id)
}

// RejectJobRequest mocks base method.
func (m *MockWorkerRepository) RejectJobRequest(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectJobRequest", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectJobRequest indicates an expected call of RejectJobRequest.
func (mr *MockWorkerRepositoryMockRecorder) RejectJobRequest(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectJobRequest", reflect.TypeOf((*MockWorkerRepository)(nil).RejectJobRequest), id)
}

// StoreVerificationDetails mocks base method.
func (m *MockWorkerRepository) StoreVerificationDetails(email string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreVerificationDetails", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreVerificationDetails indicates an expected call of StoreVerificationDetails.
func (mr *MockWorkerRepositoryMockRecorder) StoreVerificationDetails(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreVerificationDetails", reflect.TypeOf((*MockWorkerRepository)(nil).StoreVerificationDetails), email, code)
}

// VerifyAccount mocks base method.
func (m *MockWorkerRepository) VerifyAccount(email string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccount", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAccount indicates an expected call of VerifyAccount.
func (mr *MockWorkerRepositoryMockRecorder) VerifyAccount(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccount", reflect.TypeOf((*MockWorkerRepository)(nil).VerifyAccount), email, code)
}

// ViewJob mocks base method.
func (m *MockWorkerRepository) ViewJob(id int) ([]domain.WorkerJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJob", id)
	ret0, _ := ret[0].([]domain.WorkerJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJob indicates an expected call of ViewJob.
func (mr *MockWorkerRepositoryMockRecorder) ViewJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJob", reflect.TypeOf((*MockWorkerRepository)(nil).ViewJob), id)
}

// WorkerAddProfile mocks base method.
func (m *MockWorkerRepository) WorkerAddProfile(Profile domain.Profile, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerAddProfile", Profile, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerAddProfile indicates an expected call of WorkerAddProfile.
func (mr *MockWorkerRepositoryMockRecorder) WorkerAddProfile(Profile, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerAddProfile", reflect.TypeOf((*MockWorkerRepository)(nil).WorkerAddProfile), Profile, id)
}

// WorkerChangePassword mocks base method.
func (m *MockWorkerRepository) WorkerChangePassword(changepassword string, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerChangePassword", changepassword, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerChangePassword indicates an expected call of WorkerChangePassword.
func (mr *MockWorkerRepositoryMockRecorder) WorkerChangePassword(changepassword, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerChangePassword", reflect.TypeOf((*MockWorkerRepository)(nil).WorkerChangePassword), changepassword, id)
}

// WorkerEditProfile mocks base method.
func (m *MockWorkerRepository) WorkerEditProfile(Profile domain.Profile, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerEditProfile", Profile, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerEditProfile indicates an expected call of WorkerEditProfile.
func (mr *MockWorkerRepositoryMockRecorder) WorkerEditProfile(Profile, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerEditProfile", reflect.TypeOf((*MockWorkerRepository)(nil).WorkerEditProfile), Profile, id)
}
