// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.interface.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	domain "github.com/fazilnbr/project-workey/pkg/domain"
	utils "github.com/fazilnbr/project-workey/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(address domain.Address) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", address)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), address)
}

// AddToFavorite mocks base method.
func (m *MockUserRepository) AddToFavorite(favorite domain.Favorite) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavorite", favorite)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToFavorite indicates an expected call of AddToFavorite.
func (mr *MockUserRepositoryMockRecorder) AddToFavorite(favorite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavorite", reflect.TypeOf((*MockUserRepository)(nil).AddToFavorite), favorite)
}

// CheckInFevorite mocks base method.
func (m *MockUserRepository) CheckInFevorite(favorite domain.Favorite) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInFevorite", favorite)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInFevorite indicates an expected call of CheckInFevorite.
func (mr *MockUserRepositoryMockRecorder) CheckInFevorite(favorite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInFevorite", reflect.TypeOf((*MockUserRepository)(nil).CheckInFevorite), favorite)
}

// CheckInRequest mocks base method.
func (m *MockUserRepository) CheckInRequest(request domain.Request) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInRequest", request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInRequest indicates an expected call of CheckInRequest.
func (mr *MockUserRepositoryMockRecorder) CheckInRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInRequest", reflect.TypeOf((*MockUserRepository)(nil).CheckInRequest), request)
}

// CheckOrderId mocks base method.
func (m *MockUserRepository) CheckOrderId(userId int, orderId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderId", userId, orderId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrderId indicates an expected call of CheckOrderId.
func (mr *MockUserRepositoryMockRecorder) CheckOrderId(userId, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderId", reflect.TypeOf((*MockUserRepository)(nil).CheckOrderId), userId, orderId)
}

// DeleteAddress mocks base method.
func (m *MockUserRepository) DeleteAddress(id, userid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", id, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserRepositoryMockRecorder) DeleteAddress(id, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserRepository)(nil).DeleteAddress), id, userid)
}

// DeleteJobRequest mocks base method.
func (m *MockUserRepository) DeleteJobRequest(requestId, userid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", requestId, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest.
func (mr *MockUserRepositoryMockRecorder) DeleteJobRequest(requestId, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockUserRepository)(nil).DeleteJobRequest), requestId, userid)
}

// FetchRazorPayDetials mocks base method.
func (m *MockUserRepository) FetchRazorPayDetials(userId, requestId int) (domain.RazorPayVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRazorPayDetials", userId, requestId)
	ret0, _ := ret[0].(domain.RazorPayVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRazorPayDetials indicates an expected call of FetchRazorPayDetials.
func (mr *MockUserRepositoryMockRecorder) FetchRazorPayDetials(userId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRazorPayDetials", reflect.TypeOf((*MockUserRepository)(nil).FetchRazorPayDetials), userId, requestId)
}

// FindUser mocks base method.
func (m *MockUserRepository) FindUser(email string) (domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", email)
	ret0, _ := ret[0].(domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserRepositoryMockRecorder) FindUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserRepository)(nil).FindUser), email)
}

// FindUserWithId mocks base method.
func (m *MockUserRepository) FindUserWithId(id int) (domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserWithId", id)
	ret0, _ := ret[0].(domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserWithId indicates an expected call of FindUserWithId.
func (mr *MockUserRepositoryMockRecorder) FindUserWithId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserWithId", reflect.TypeOf((*MockUserRepository)(nil).FindUserWithId), id)
}

// InsertUser mocks base method.
func (m *MockUserRepository) InsertUser(login domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryMockRecorder) InsertUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), login)
}

// ListAddress mocks base method.
func (m *MockUserRepository) ListAddress(id int) ([]domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddress", id)
	ret0, _ := ret[0].([]domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddress indicates an expected call of ListAddress.
func (mr *MockUserRepositoryMockRecorder) ListAddress(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddress", reflect.TypeOf((*MockUserRepository)(nil).ListAddress), id)
}

// ListFevorite mocks base method.
func (m *MockUserRepository) ListFevorite(pagenation utils.Filter, id int) ([]domain.ListFavorite, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFevorite", pagenation, id)
	ret0, _ := ret[0].([]domain.ListFavorite)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFevorite indicates an expected call of ListFevorite.
func (mr *MockUserRepositoryMockRecorder) ListFevorite(pagenation, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFevorite", reflect.TypeOf((*MockUserRepository)(nil).ListFevorite), pagenation, id)
}

// ListSendRequests mocks base method.
func (m *MockUserRepository) ListSendRequests(pagenation utils.Filter, id int) ([]domain.RequestUserResponse, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSendRequests", pagenation, id)
	ret0, _ := ret[0].([]domain.RequestUserResponse)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSendRequests indicates an expected call of ListSendRequests.
func (mr *MockUserRepositoryMockRecorder) ListSendRequests(pagenation, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSendRequests", reflect.TypeOf((*MockUserRepository)(nil).ListSendRequests), pagenation, id)
}

// ListWorkersWithJob mocks base method.
func (m *MockUserRepository) ListWorkersWithJob(pagenation utils.Filter) ([]domain.ListJobsWithWorker, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkersWithJob", pagenation)
	ret0, _ := ret[0].([]domain.ListJobsWithWorker)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkersWithJob indicates an expected call of ListWorkersWithJob.
func (mr *MockUserRepositoryMockRecorder) ListWorkersWithJob(pagenation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersWithJob", reflect.TypeOf((*MockUserRepository)(nil).ListWorkersWithJob), pagenation)
}

// SavePaymentOrderDeatials mocks base method.
func (m *MockUserRepository) SavePaymentOrderDeatials(payment domain.JobPayment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePaymentOrderDeatials", payment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePaymentOrderDeatials indicates an expected call of SavePaymentOrderDeatials.
func (mr *MockUserRepositoryMockRecorder) SavePaymentOrderDeatials(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePaymentOrderDeatials", reflect.TypeOf((*MockUserRepository)(nil).SavePaymentOrderDeatials), payment)
}

// SearchWorkersWithJob mocks base method.
func (m *MockUserRepository) SearchWorkersWithJob(pagenation utils.Filter, key string) ([]domain.ListJobsWithWorker, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWorkersWithJob", pagenation, key)
	ret0, _ := ret[0].([]domain.ListJobsWithWorker)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchWorkersWithJob indicates an expected call of SearchWorkersWithJob.
func (mr *MockUserRepositoryMockRecorder) SearchWorkersWithJob(pagenation, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkersWithJob", reflect.TypeOf((*MockUserRepository)(nil).SearchWorkersWithJob), pagenation, key)
}

// SendJobRequest mocks base method.
func (m *MockUserRepository) SendJobRequest(request domain.Request) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJobRequest", request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendJobRequest indicates an expected call of SendJobRequest.
func (mr *MockUserRepositoryMockRecorder) SendJobRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJobRequest", reflect.TypeOf((*MockUserRepository)(nil).SendJobRequest), request)
}

// StoreVerificationDetails mocks base method.
func (m *MockUserRepository) StoreVerificationDetails(email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreVerificationDetails", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreVerificationDetails indicates an expected call of StoreVerificationDetails.
func (mr *MockUserRepositoryMockRecorder) StoreVerificationDetails(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreVerificationDetails", reflect.TypeOf((*MockUserRepository)(nil).StoreVerificationDetails), email, code)
}

// UpdateJobComplition mocks base method.
func (m *MockUserRepository) UpdateJobComplition(userId, requestId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobComplition", userId, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobComplition indicates an expected call of UpdateJobComplition.
func (mr *MockUserRepositoryMockRecorder) UpdateJobComplition(userId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobComplition", reflect.TypeOf((*MockUserRepository)(nil).UpdateJobComplition), userId, requestId)
}

// UpdatePaymentId mocks base method.
func (m *MockUserRepository) UpdatePaymentId(razorPaymentId string, idPayment int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentId", razorPaymentId, idPayment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentId indicates an expected call of UpdatePaymentId.
func (mr *MockUserRepositoryMockRecorder) UpdatePaymentId(razorPaymentId, idPayment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentId", reflect.TypeOf((*MockUserRepository)(nil).UpdatePaymentId), razorPaymentId, idPayment)
}

// UserAddProfile mocks base method.
func (m *MockUserRepository) UserAddProfile(Profile domain.Profile, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddProfile", Profile, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAddProfile indicates an expected call of UserAddProfile.
func (mr *MockUserRepositoryMockRecorder) UserAddProfile(Profile, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddProfile", reflect.TypeOf((*MockUserRepository)(nil).UserAddProfile), Profile, id)
}

// UserChangePassword mocks base method.
func (m *MockUserRepository) UserChangePassword(changepassword string, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChangePassword", changepassword, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChangePassword indicates an expected call of UserChangePassword.
func (mr *MockUserRepositoryMockRecorder) UserChangePassword(changepassword, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChangePassword", reflect.TypeOf((*MockUserRepository)(nil).UserChangePassword), changepassword, id)
}

// UserEditProfile mocks base method.
func (m *MockUserRepository) UserEditProfile(Profile domain.Profile, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditProfile", Profile, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserEditProfile indicates an expected call of UserEditProfile.
func (mr *MockUserRepositoryMockRecorder) UserEditProfile(Profile, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditProfile", reflect.TypeOf((*MockUserRepository)(nil).UserEditProfile), Profile, id)
}

// VerifyAccount mocks base method.
func (m *MockUserRepository) VerifyAccount(email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccount", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAccount indicates an expected call of VerifyAccount.
func (mr *MockUserRepositoryMockRecorder) VerifyAccount(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccount", reflect.TypeOf((*MockUserRepository)(nil).VerifyAccount), email, code)
}

// ViewSendOneRequest mocks base method.
func (m *MockUserRepository) ViewSendOneRequest(userId, requestId int) (domain.RequestUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSendOneRequest", userId, requestId)
	ret0, _ := ret[0].(domain.RequestUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSendOneRequest indicates an expected call of ViewSendOneRequest.
func (mr *MockUserRepositoryMockRecorder) ViewSendOneRequest(userId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSendOneRequest", reflect.TypeOf((*MockUserRepository)(nil).ViewSendOneRequest), userId, requestId)
}
